1) Что такое Java Message Service (JMS)?
Java API, которые позволяют приложениям создавать, отправлять, получать и читать сообщения.
2) JMS приложение состоит из следующих частей: JMS провайдер, JMS клиенты, Сообщения, Администрируемые объекты. Дайте определение этим понятиям.
JMS провайдер – это система, управляющая сообщениями, которая реализовывает JMS API и обеспечивает исполнение административных и управленческих задач.
JMS клиенты – это программы или компоненты, написанные на Java, которые производят и потребляют сообщения. Любой компонент приложения Java EE может выступать в качестве клиента JMS. 
Сообщения – это объекты, являющиеся носителями информации. 
Администрируемые объекты – это отконфигурированные JMS объекты, создаваемые администратором для использования клиентами
3) Отличие messaging от RMI?
Messaging делает возможным распределенное взаимодействие между слабо связанными компонентами. Компонент отправляет сообщение в пункт назначения,  и получатель может забрать оттуда это сообщение. Однако отправитель и получатель не обязательно могут быть доступны в одно и то же время. Ни отправителю ничего не надо знать о получателе, ни получателю – об отправителе. Единственное, что должны знать обе стороны – это формат сообщения и его месторасположение (destination). В этом смысле, messaging отличается от такой технологии, как RMI, которая требует от приложения вызова метода по его конкретному имени. 
4) Концепция Point-to-point. Что используется в качестве пункта назначения (destinations) при данном подходе?
Определенная очередь
5) Концепция Publish/subscribe. Что используется в качестве пункта назначения (destinations) при данном подходе?
Topic (набор тем)
6) Что такое Message Driven Bean (MDB)? Какой интерфейс должен реализовывать класс бина? С помощью какого метода бин обрабатывает входящие сообщения?
Бин, управляемый сообщениями (MDB), – это бин, который позволяет приложению Java EE управлять сообщениями асинхронно. Он обычно выступает в роли слушателя JMS сообщений. Сообщения могут быть отправлены любым Java EE компонентом. MDB может обрабатывать JMS сообщения или другие виды сообщений. 
7) В чем их отличие от сессионных бинов?
MDB не сохраняют состояния клиента
Все MDB равноправны, т.е. EJB контейнер может присвоить сообщение любому бину, управляемому сообщениями.
Один MDB может обрабатывать сообщения от множества клиентов. Клиенты не размещают MDB и не  вызывают методы бина прямо на нем. Вместо этого, клиент получает доступ к классу бина через JMS, отправляя сообщения в пункт назначения. Присвоение пункта назначения MDB происходит в течение деплоймента с помощью ресурсов сервера приложения. 
8) Для чего служит метод onMessage?
Когда приходит сообщение, контейнер вызывает метод onMessage для обработки сообщения. Этот метод обычно приводит сообщение к одному из пяти возможных типов JMS сообщения и обрабатывает его в соответствии с бизнес-логикой. Метод onMessage может вызывать вспомогательные методы. Сообщение может быть доставлено бину, управляемому сообщениями, в пределах контекста транзакции, так что все операции внутри метода onMessage являются частью единой транзакции. Если обработка сообщения откатывается (выполняется откат – roll back), то и доставка сообщения отменяется. 
9) В чем преимущество использования MDB для организации обмена сообщениями?
Некоторые задания выполняются EJB контейнером. Класс бина использует аннотацию @MessageDriven, чтобы определить свойства бина или фабрики соединений.  
10) Каковы функции слушателя сообщений? В чем сходства и различия его со слушателем событий (event listener)?
MDB по сути своей является слушателем сообщений (message listener), который может потреблять сообщения из очереди или длительной подписки. Сообщения могут отправляться любым Java EE компонентом, даже приложением, которое не использует технологию Java EE. Как и слушатель сообщений в автономном JMS клиенте,  MDB содержит метод onMessage, который вызывается автоматически с приходом сообщения. Особенности MDB-шного слушателя сообщений таковы:  Некоторые задания выполняются EJB контейнером (см. ниже)  Класс бина использует аннотацию @MessageDriven, чтобы определить свойства бина или фабрики соединений.  
11) Может ли MDB взаимодействовать с БД?
MDB прямо не представляют открытые данные в БД, они лишь могут получить доступ и затем эти данные обновлять. Он может сохранять информацию сообщения в БД.